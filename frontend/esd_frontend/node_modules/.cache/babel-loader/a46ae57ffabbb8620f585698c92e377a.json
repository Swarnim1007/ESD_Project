{"ast":null,"code":"var _jsxFileName = \"/Users/swarnim/Desktop/1st Sem/ESD/MT2023029/front_end/esd_frontend/src/Home.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport NavBar from './components/NavBar';\nimport RoomExchangeForm from './components/RoomExchangeForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [user, setUser] = useState(null);\n\n  // Will store the bills of the logged in user\n  //const [ bills, setBills ] = useState([])\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [notification, setNotification] = useState(null);\n  const [notificationType, setNotificationType] = useState(null);\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message);\n    setNotificationType(type);\n    setTimeout(() => {\n      setNotificationType(null);\n      setNotification(null);\n    }, 3000);\n  };\n\n  // Function that handles login of users\n  const handleLogin = async credentials => {\n    try {\n      const userObject = await loginService.login(credentials);\n      console.log(\"user object\", userObject);\n      if (userObject == '0') throw new Error();\n      setUser(userObject);\n      setNotificationType(\"AvilableRequest\");\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject));\n      // console.log(\"The User Id is \",window.localStorage.getItem('loggedInUser'))\n\n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success');\n    } catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error');\n    }\n  };\n  const handleExchangeRequest = async details => {\n    try {\n      notificationHandler(`Submitted successfully `, 'success');\n    } catch (exception) {\n      notificationHandler(`Submission Unsuccessful`, 'error');\n    }\n  };\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser');\n    if (loggedInUser) setUser(JSON.parse(loggedInUser));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"home\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center page-header p-2 regular-text-shadow regular-shadow\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"display-4 font-weight-bold\",\n          children: \"Room Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /* Show Login form when no login has happened */\n      user === null && /*#__PURE__*/_jsxDEV(LoginForm, {\n        startLogin: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), /* Show NavBar when login has happened */\n      user !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          user: user,\n          setUser: setUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(RoomExchangeForm, {\n          startSubmit: handleExchangeRequest\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this)\n      // <NavBar user={user} setUser={setUser}/>\n      , /*#__PURE__*/_jsxDEV(Notification, {\n        notification: notification,\n        type: notificationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"JAWiwn/liRVjn3wdfe2QyUOZVr4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","loginService","Notification","LoginForm","NavBar","RoomExchangeForm","Home","user","setUser","notification","setNotification","notificationType","setNotificationType","notificationHandler","message","type","setTimeout","handleLogin","credentials","userObject","login","console","log","Error","window","localStorage","setItem","JSON","stringify","firstName","exception","handleExchangeRequest","details","loggedInUser","getItem","parse"],"sources":["/Users/swarnim/Desktop/1st Sem/ESD/MT2023029/front_end/esd_frontend/src/Home.js"],"sourcesContent":["import { useState, useEffect } from 'react'\n\nimport loginService from './services/login'\n\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NavBar from './components/NavBar'\nimport RoomExchangeForm from './components/RoomExchangeForm'\n\nconst Home = () => {\n    // user state will store the logged in user object, if no login has been done yet then it will be null\n    const [user, setUser] = useState(null)\n    \n\n    // Will store the bills of the logged in user\n    //const [ bills, setBills ] = useState([])\n\n    // These states are used to control the notifications that show up at the top of the screen for events like \n    // login, signup, watchlist creation, etc.\n    const [notification, setNotification] = useState(null)\n    const [notificationType, setNotificationType] = useState(null)\n\n    // Create a notification at the top of the screen with given message for 10 seconds \n    // Notifications are of two types, \"error\" and \"success\"\n    // The appearance of these two notifications can be adjusted via the index.css file\n    const notificationHandler = (message, type) => {\n        setNotification(message)\n        setNotificationType(type)\n\n        setTimeout(() => {\n            setNotificationType(null)\n            setNotification(null)\n        }, 3000)\n    }\n\n    // Function that handles login of users\n    const handleLogin = async (credentials) => {\n        try {\n            const userObject = await loginService.login(credentials)\n            console.log(\"user object\", userObject);\n            if(userObject == '0') throw new Error();\n\n            setUser(userObject)\n            setNotificationType(\"AvilableRequest\")\n            window.localStorage.setItem('loggedInUser', JSON.stringify(userObject))\n            // console.log(\"The User Id is \",window.localStorage.getItem('loggedInUser'))\n\n            notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success')\n\n        }\n        catch (exception) {\n            notificationHandler(`Log in failed, check username and password entered`, 'error')\n        }\n    };\n    const handleExchangeRequest = async (details) => {\n\n        \n\n        try {\n            notificationHandler(`Submitted successfully `, 'success')\n\n        }\n        catch (exception) {\n            notificationHandler(`Submission Unsuccessful`, 'error')\n        }\n    };\n\n\n\n    // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n    // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n    useEffect(() => {\n        const loggedInUser = window.localStorage.getItem('loggedInUser')\n        if (loggedInUser)\n            setUser(JSON.parse(loggedInUser))\n\n        \n    }, [])\n\n    return (\n        <div>\n            <home>\n                {/* Header of the page */}\n                <div className='text-center page-header p-2 regular-text-shadow regular-shadow'>\n                    <div className='display-4 font-weight-bold'>\n                        Room Exchange\n                    </div>\n                </div>\n\n                {/* Notification component that will render only when the notification state is not null */}\n\n\n\n                {\n                    /* Show Login form when no login has happened */\n                    user === null &&\n                    <LoginForm startLogin={handleLogin} />\n                }\n\n\n                {\n                    /* Show NavBar when login has happened */\n                    user !== null && (\n                        <div>\n                            <NavBar user={user} setUser={setUser} />\n                            <RoomExchangeForm startSubmit={handleExchangeRequest} />\n                        </div>\n                    )\n                    // <NavBar user={user} setUser={setUser}/>\n                }\n                <Notification notification={notification} type={notificationType} />\n\n                {\n                    /* Show Bills of the User when login has happened */\n                    // user !== null &&\n                    // <Bills\n                    //   bills={bills}\n                    //   payBill={payBill}\n                    // />\n                }\n            </home>\n\n        </div>\n    );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}